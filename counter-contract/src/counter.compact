pragma language_version >= 0.16 && <= 0.17;

import CompactStandardLibrary;

struct Leak {
  id: Uint<64>,
  uri: Opaque<"string">,
  donation_addr: Opaque<"string">,
  donated: Uint<64>
}

// Public state
export ledger leaks: Map<Uint<64>, Leak>;
export ledger nextLeakId: Counter;
export ledger round: Counter;

// Constructor
constructor() {
  // leaks = default<Set<Leak>>;
  // nextLeakId = Counter(0);
}

// Create Leak
export circuit createLeak(uri: Opaque<"string">, donation_addr: Opaque<"string">): [] {
  const newLeak = Leak {
    id: nextLeakId,
    uri: disclose(uri),
    donation_addr: disclose(donation_addr),
    donated: 0
  };
  leaks.insert(nextLeakId, newLeak);
  nextLeakId.increment(1);
  round.increment(1);
}

// Get Leak by id
export circuit getLeak(id: Uint<64>): Leak {
  assert(leaks.member(disclose(id)), "Leak does not exist");
  return leaks.lookup(disclose(id));
}

// Counter increment/decrement
export circuit increment(): [] {
  round.increment(1);
}

export circuit decrement(): [] {
  round.decrement(1);
}